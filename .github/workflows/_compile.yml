name: Compile for PowerPC

on:
  workflow_call:
    inputs:
      git_tag:
        description: 'Git tag to use'
        required: true
        type: string
      gcc:
        description: 'GCC version to use'
        required: true
        default: 11
        type: string
      spe:
        description: 'Compile with SPE'
        required: false
        default: "no"
        type: string

env:
  archive_name: clib4-${{ inputs.git_tag }}${{ inputs.spe == 'yes' && '_SPE' || '' }}
  SSH_KEY: ${{ secrets.DEBSERVER_PRIVATE_KEY }}
  SSH_USER: ${{ secrets.DEBSERVER_USERNAME }}
  SSH_PORT: ${{ secrets.DEBSERVER_PORT }}
  SSH_HOST: ${{ secrets.DEBSERVER_HOST }}

jobs:
  compile:
    runs-on: ubuntu-latest
    environment: deploy_environment
    container:
      image: walkero/amigagccondocker:os4-gcc${{ inputs.gcc }}
      volumes:
        - '${{ github.workspace }}:/opt/code'
    steps:
      - name: Pull code
        uses: actions/checkout@v4

      - name: Add repository to git safe directories
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git config --global --add safe.directory /opt/code

      - name: Compile clib4
        uses: ./.github/actions/compile
        with:
          git_tag: ${{ inputs.git_tag }}
          spe: ${{ inputs.spe }}

      - name: Create the LHA release archive
        run: |
          make -f GNUmakefile.os4 release && \
          mv clib4.lha ${{ env.archive_name }}.lha

      - name: Create the DEB release archive
        run: |
          make -f GNUmakefile.os4 dpkg DPKG_LIB=${{ env.archive_name }}_amd64

      - name: Upload LHA release file in GitHub
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: /opt/code/${{ env.archive_name }}.lha
          asset_name: ${{ env.archive_name }}.lha
          asset_content_type: application/x-lzh-compressed

      - name: Install GitHub binary
        uses: ./.github/actions/install-gh

      - name: Upload DEB release file in GitHub
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: /opt/code/${{ env.archive_name }}_amd64.deb
          asset_name: ${{ env.archive_name }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-pac

      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Setup SSH key
        if: ${{ inputs.spe == 'no' }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p $SSH_PORT -H $SSH_HOST >> ~/.ssh/known_hosts

      - name: Before script
        if: ${{ inputs.spe == 'no' }}
        run: |
          echo "Remove old release"
          ssh -i ~/.ssh/id_rsa \
              -p $SSH_PORT \
              -o StrictHostKeyChecking=no \
              $SSH_USER@$SSH_HOST \
              "rm /opt/amigarepo/ubuntu/pool/main/clib4-v*_amd64.deb"

      - name: Upload via SCP
        if: ${{ inputs.spe == 'no' }}
        run: |
          scp -i ~/.ssh/id_rsa \
              -P $SSH_PORT \
              -o StrictHostKeyChecking=no \
              "/opt/code/${{ env.archive_name }}_amd64.deb" \
              $SSH_USER@$SSH_HOST:/opt/amigarepo/ubuntu/pool/main

      - name: After script
        if: ${{ inputs.spe == 'no' }}
        run: |
          echo "Regenerate the packages"
          ssh -i ~/.ssh/id_rsa \
              -p $SSH_PORT \
              -o StrictHostKeyChecking=no \
              $SSH_USER@$SSH_HOST \
              "sh /root/regenerate-packages.sh"

      - name: SSH Cleanup
        if: ${{ inputs.spe == 'no' }}
        run: |
          rm -f ~/.ssh/id_rsa

      - name: Create Pull Request
        if: ${{ inputs.spe == 'no' }}
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: Release ${{ inputs.git_tag }} changes
          branch: release/${{ inputs.git_tag }}
          base: master
          body: Automated changes as part of the release
          title: Version files changes by the github bot
